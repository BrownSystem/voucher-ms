
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EVoucherScalarFieldEnum = {
  id: 'id',
  number: 'number',
  letter: 'letter',
  type: 'type',
  emissionDate: 'emissionDate',
  dueDate: 'dueDate',
  emissionBranchId: 'emissionBranchId',
  emissionBranchName: 'emissionBranchName',
  destinationBranchId: 'destinationBranchId',
  destinationBranchName: 'destinationBranchName',
  status: 'status',
  financialStatus: 'financialStatus',
  logisticStatus: 'logisticStatus',
  contactId: 'contactId',
  contactName: 'contactName',
  conditionPayment: 'conditionPayment',
  currency: 'currency',
  exchangeRate: 'exchangeRate',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  remainingAmount: 'remainingAmount',
  observation: 'observation',
  available: 'available',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  emittedBy: 'emittedBy',
  deliveredBy: 'deliveredBy'
};

exports.Prisma.EVoucherProductScalarFieldEnum = {
  id: 'id',
  voucherId: 'voucherId',
  isReserved: 'isReserved',
  productId: 'productId',
  description: 'description',
  quantity: 'quantity',
  price: 'price',
  subtotal: 'subtotal',
  branchId: 'branchId'
};

exports.Prisma.EBankScalarFieldEnum = {
  id: 'id',
  name: 'name',
  branch: 'branch',
  account: 'account',
  cbu: 'cbu',
  alias: 'alias',
  currency: 'currency',
  isActive: 'isActive',
  accountType: 'accountType',
  bankCode: 'bankCode',
  swiftCode: 'swiftCode',
  holderName: 'holderName',
  holderDoc: 'holderDoc',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  available: 'available'
};

exports.Prisma.EPaymentScalarFieldEnum = {
  id: 'id',
  voucherId: 'voucherId',
  method: 'method',
  amount: 'amount',
  currency: 'currency',
  exchangeRate: 'exchangeRate',
  originalAmount: 'originalAmount',
  receivedAt: 'receivedAt',
  receivedBy: 'receivedBy',
  bankId: 'bankId',
  chequeNumber: 'chequeNumber',
  chequeDueDate: 'chequeDueDate',
  chequeStatus: 'chequeStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.VoucherType = exports.$Enums.VoucherType = {
  FACTURA: 'FACTURA',
  REMITO: 'REMITO',
  NOTA_CREDITO: 'NOTA_CREDITO',
  P: 'P'
};

exports.VoucherStatus = exports.$Enums.VoucherStatus = {
  PENDIENTE: 'PENDIENTE',
  PAGADO: 'PAGADO',
  CANCELADO: 'CANCELADO',
  ENTREGADO: 'ENTREGADO',
  RESERVADO: 'RESERVADO'
};

exports.ConditionPayment = exports.$Enums.ConditionPayment = {
  CASH: 'CASH',
  CREDIT: 'CREDIT'
};

exports.Currency = exports.$Enums.Currency = {
  ARS: 'ARS',
  USD: 'USD',
  EUR: 'EUR'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  EFECTIVO: 'EFECTIVO',
  CHEQUE: 'CHEQUE',
  TRANSFERENCIA: 'TRANSFERENCIA',
  TARJETA: 'TARJETA'
};

exports.Prisma.ModelName = {
  EVoucher: 'EVoucher',
  EVoucherProduct: 'EVoucherProduct',
  EBank: 'EBank',
  EPayment: 'EPayment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
