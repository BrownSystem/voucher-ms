// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VoucherType {
  FACTURA
  REMITO
  NOTA_CREDITO_PROVEEDOR
  NOTA_CREDITO_CLIENTE
  P
}

enum ConditionPayment {
  CASH
  CREDIT
}

enum PaymentMethod {
  EFECTIVO
  CHEQUE
  TRANSFERENCIA
  TARJETA
}

enum VoucherStatus {
  PENDIENTE
  PAGADO
  CANCELADO
  ENTREGADO
  RESERVADO
}

enum Currency {
  ARS
  USD
  EUR
}

model EVoucher {
  id           String      @id @default(uuid())
  number       String
  letter       String?
  type         VoucherType
  emissionDate DateTime    @default(now())
  dueDate      DateTime?

  emissionBranchId      String?
  emissionBranchName    String?
  destinationBranchId   String?
  destinationBranchName String?

  status          VoucherStatus @default(PENDIENTE)
  financialStatus String? // PAGADO_PARCIAL, EN_MORA, etc.
  logisticStatus  String? // EN_PREPARACION, EN_CAMINO, etc.

  contactId   String?
  contactName String?

  conditionPayment ConditionPayment?
  currency         Currency
  exchangeRate     Float? // Si el pago es en otra moneda

  totalAmount     Float?
  paidAmount      Float  @default(0)
  remainingAmount Float // totalAmount - paidAmount

  observation String?

  available Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  emittedBy   String?
  deliveredBy String?
  payments    EPayment[]        @relation("VoucherPayments")
  products    EVoucherProduct[] @relation("VoucherProducts")

  @@index([type, emissionDate])
  @@index([contactId, status])
}

model EVoucherProduct {
  id String @id @default(uuid())

  voucher   EVoucher? @relation("VoucherProducts", fields: [voucherId], references: [id])
  voucherId String?

  isReserved Boolean @default(false) // Indica si es un producto reservado

  productId   String // ID desde products-ms
  description String // Descripción del producto
  quantity    Int
  price       Float // Precio unitario
  subtotal    Float // Calculado: quantity * price

  branchId String? // ID de la sucursal donde se emitió el voucher

  observation String?

  @@index([voucherId, productId])
}

model EBank {
  id       String   @id @default(uuid())
  name     String // Nombre de la entidad bancaria
  branch   String? // Sucursal, útil si hay múltiples
  account  String? // Número de cuenta
  cbu      String? // CBU Argentina
  alias    String? // Alias CBU
  currency Currency // Moneda de la cuenta
  isActive Boolean  @default(true)

  accountType String? // CAJA_AHORRO, CUENTA_CORRIENTE
  bankCode    String? // Código del banco (BCRA o internacional)
  swiftCode   String? // Para transferencias internacionales
  holderName  String? // Titular de la cuenta
  holderDoc   String? // CUIT/CUIL del titular

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments EPayment[] @relation("BankPayments")

  available Boolean @default(true)

  @@index([name, currency])
  @@index([cbu])
  @@index([alias])
}

model EPayment {
  id        String   @id @default(uuid())
  voucherId String
  voucher   EVoucher @relation("VoucherPayments", fields: [voucherId], references: [id])

  method         PaymentMethod
  amount         Float
  currency       Currency
  exchangeRate   Float? // Si hay conversión ARS ↔ USD
  originalAmount Float? // Monto en moneda original antes del cambio

  receivedAt DateTime @default(now())
  receivedBy String?

  bankId String?
  bank   EBank?  @relation("BankPayments", fields: [bankId], references: [id])

  // Cheque info
  chequeNumber  String?
  chequeDueDate DateTime?
  chequeStatus  String? // PENDIENTE, RECHAZADO, COMPENSADO

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  observation String?

  @@index([voucherId, method])
  @@index([receivedAt])
}
